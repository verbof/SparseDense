    if (position[0] == dims[0]-1) // the processor belongs to the last row of the grid...
    {
        int exceeding_rows = 0;
        
        for (int k = 0; k < dims[0]; k++)
            exceeding_rows += blocksize * ceil((Dblocks-k)/(double)dims[0]);  // I compute the number of rows stored by all the processors belonging to this row.

        exceeding_rows -= Ddim;             // I compute the number of rows exceeding the real number of rows of B.
        s_BT_i         -= exceeding_rows;   // I take away the exceeding number of rows from the standard number of rows-per-process (i.e., blocksize*Drows).
    }
    
    if (position[1] == dims[1]-1)
    {
        int exceeding_cols = 0;

        for (int k = 0; k < dims[1]; k++)
            exceeding_cols += blocksize * ceil((Dblocks-k)/(double)dims[1]);

        exceeding_cols -= Ddim;
        s_B_j          -= exceeding_cols;
    }

    B_j  = new double[Adim*s_B_j];
    BT_i = new double[s_BT_i*Adim];

    genOnes(Adim,   s_B_j, 1e-15, B_j);
    genOnes(s_BT_i, Adim,  1e-15, BT_i);

    *size_BT_j = s_BT_i;
    *size_B_j  = s_B_j;

    //for (int k = 0; k < Adim*s_B_j; k++) cout << b_j[k] << "\t";

    //dense2CSR(b_j,  Adim,   s_B_j, B_j);
    //dense2CSR(bt_i, s_BT_i, Adim,  BT_i);


    delete[] b_j;
    delete[] bt_i;

}


